{"version":3,"sources":["common/utils.js","api.js","common/actions.js","common/constants.js","App.js","serviceWorker.js","index.js"],"names":["noop","showToastr","type","rest","toast","successErrorHandler","resolve","reject","success","data","status","err","error","request","path","method","payload","headers","fatal","unauth","statusText","options","credentials","Accept","body","JSON","stringify","fetch","then","res","json","console","catch","e","errors","base","getRequest","url","Promise","undefined","get","postRequest","post","createUser","createPost","getStatus","getHome","follow","unfollow","getFollowers","getFollowing","App","state","currentUser","feed","posts","following","followers","name","firstName","u","setState","updatePages","userId","fetchStatus","fetchHome","home","fetchFollowers","fetchFollowing","Card","className","style","width","Header","login","Img","variant","src","Body","Text","message","posted","Button","upVote","dVote","user","class","event","preventDefault","this","target","elements","description","value","p","uId","uId2","parseInt","user_id","temp","unfollowUser","Navbar","bg","Brand","href","logindId","Nav","onClick","Tabs","defaultActiveKey","Tab","eventKey","title","Form","onSubmit","handleSubmit","Group","Control","placeholder","required","map","item","newPost","userCard","sendRequest","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","pauseOnVisibilityChange","draggable","pauseOnHover","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1827f1af.chunk.js","sourcesContent":["import { toast } from \"react-toastify\";\n\nexport const noop = () => {};\n\nexport const showToastr = (type, ...rest) => {\n  toast[type](...rest);\n};\n\nexport const successErrorHandler = (resolve, reject) => {\n  const success = (data, status) => resolve(data);\n  const err = error => {\n    reject && reject(error);\n  };\n  return {\n    success,\n    err\n  };\n};\n\nexport const showToastrError = errObj => {\n  showToastr(\"error\", errObj.error || errObj.err || \"Something went wrong.\", null, {\n    timeOut: 0,\n    extendedTimeOut: 0\n  });\n};","import { noop, successErrorHandler } from \"./common/utils\";\nconst request = (\n  path,\n  method,\n  payload,\n  success = noop,\n  err = noop,\n  headers = {},\n  fatal,\n  unauth\n) => {\n  let status = 0;\n  let statusText = \"Something went wrong\";\n  const options = {\n    method: method,\n    credentials: \"same-origin\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      ...headers\n    }\n  };\n\n  if (payload) {\n    options.body = JSON.stringify(payload);\n  }\n\n  fetch(path, options)\n    .then(res => {\n      status = res.status;\n      statusText = res.statusText || statusText;\n      if (status === 404) {\n        statusText = \"Not Found\";\n      }\n      return res.json();\n    })\n    .then(data => {\n      if (status >= 200 && status < 400) {\n        success(data, status);\n      } else if (status === 401) {\n        console.error(method + \" UNAUTH \" + status + \": \" + path);\n        (unauth || err)(data, status);\n      } else {\n        console.error(method + \" ERROR \" + status + \": \" + path);\n        (fatal || err)(data, status);\n      }\n    })\n    .catch(e => {\n      console.error(\n        method + \" FATAL \" + status + \": \" + path,\n        status,\n        statusText,\n        e\n      );\n      (fatal || err)({ errors: { base: [statusText] } }, status);\n    });\n};\n\nexport const genericRequest = (\n  url,\n  type = \"GET\",\n  headers,\n  onError,\n  onSuccess,\n  dataOptions = {}\n) => {\n  request(url, type, dataOptions, onSuccess, onError, headers);\n};\n\n// here rest is [success, err, headers, fatal, unauth]\nexport const get = (path, ...rest) => request(path, \"GET\", undefined, ...rest);\n\nexport const post = (path, payload, ...rest) =>\n  request(path, \"POST\", payload, ...rest);\n\nexport const patch = (path, payload, ...rest) =>\n  request(path, \"PATCH\", payload, ...rest);\n\nexport const destroy = (path, payload, ...rest) =>\n  request(path, \"DELETE\", payload, ...rest);\n\nexport const getRequest = url => {\n  return new Promise((resolve, reject) => {\n    const { success, err } = successErrorHandler(resolve, reject);\n    get(url, success, err);\n  });\n};\n\nexport const postRequest = (url, payload) => {\n  return new Promise((resolve, reject) => {\n    const { success, err } = successErrorHandler(resolve, reject);\n    post(url, payload, success, err);\n  });\n};\n\nexport const patchRequest = (url, payload) => {\n  return new Promise((resolve, reject) => {\n    const { success, err } = successErrorHandler(resolve, reject);\n    patch(url, payload, success, err);\n  });\n};\n\nexport const destroyRequest = (url, payload = {}) => {\n  return new Promise((resolve, reject) => {\n    const { success, err } = successErrorHandler(resolve, reject);\n    destroy(url, payload, success, err);\n  });\n};\n\nexport const performMultipartRequest = (url, method, payload) => {\n  const config = {\n    method: method,\n    body: payload,\n    headers: { }\n  };\n\n  return new Promise((resolve, reject) => {\n    const { success, err } = successErrorHandler(resolve, reject);\n    let stat = 0;\n    fetch(url, config)\n      .then(response => {\n        stat = response.status;\n        return response.json();\n      })\n      .then(data => {\n        if (stat >= 200 && stat < 400) {\n          success(data, stat);\n        } else {\n          console.error(method + \" ERROR \" + stat + \": \" + url);\n          err(data, stat);\n        }\n      });\n  });\n};","import { BASE_URL } from \"./constants\";\nimport { getRequest, postRequest } from \"../api\";\n\nexport const createUser = `${BASE_URL}/user`;\nexport const createPost = `${BASE_URL}/post`;\nexport const getStatus = `${BASE_URL}/status`;\nexport const getHome = `${BASE_URL}/home`;\nexport const follow = `${BASE_URL}/follow`;\nexport const unfollow = `${BASE_URL}/unfollow`;\nexport const getFollowers = `${BASE_URL}/followers`;\nexport const getFollowing = `${BASE_URL}/following`;\n\nexport const addUser = (payload) => {\n  const url = createUser;\n  return postRequest(url, payload);\n};\n\nexport const addPost = (payload) => {\n  const url = createPost;\n  return postRequest(url, payload);\n};\n\nexport const followUser = (payload) => {\n  const url = follow;\n  return postRequest(url, payload);\n};\n\nexport const unfollowUser = (payload) => {\n  const url = unfollow;\n  return postRequest(url, payload);\n};\n\nexport const fetchStatus = (userId) => {\n  const url = getStatus+\"?id=\"+userId;\n  return getRequest(url);\n};\n\nexport const fetchHome = (userId) => {\n  const url = getHome+\"?id=\"+userId;\n  return getRequest(url);\n};\n\n\nexport const fetchFollowers = (userId) => {\n  const url = getFollowers+\"?id=\"+userId;\n  return getRequest(url);\n};\n\nexport const fetchFollowing = (userId) => {\n  const url = getFollowing+\"?id=\"+userId;\n  return getRequest(url);\n};","export const BASE_URL = \"/api\";","import React from \"react\";\nimport \"./App.css\";\nimport { Navbar, Tab, Tabs, Card, Button, Nav, Form } from \"react-bootstrap\";\nimport { name } from \"faker\";\nimport {\n  addUser,\n  addPost,\n  fetchStatus,\n  fetchHome,\n  followUser,\n  unfollowUser,\n  fetchFollowers,\n  fetchFollowing,\n} from \"./common/actions\";\nimport { showToastr } from \"./common/utils\";\nclass App extends React.Component {\n  componentDidMount() {\n    addUser({ name: name.firstName() }).then((u) => {\n      this.setState(\n        {\n          currentUser: u,\n        },\n        () => {\n          this.updatePages(this.state.currentUser.userId);\n        }\n      );\n    });\n  }\n\n  updatePages(userId) {\n    fetchStatus(userId).then((posts) => {\n      fetchHome(userId).then((home) => {\n        fetchFollowers(userId).then((following) => {\n          fetchFollowing(userId).then((followers) => {\n            this.setState({\n              posts: posts,\n              feed: home,\n              followers: followers,\n              following: following,\n            });\n          });\n        });\n      });\n    });\n  }\n\n  state = {\n    currentUser: {},\n    feed: [],\n    posts: [],\n    following: [],\n    followers: [],\n  };\n  newPost(post) {\n    return (\n      <Card className=\"my-2 mx-auto\" style={{ width: \"18rem\" }}>\n        <Card.Header>Meme Author - @{post.login}</Card.Header>\n        <Card.Img variant=\"top\" src=\"https://picsum.photos/200\" />\n        <Card.Body>\n          <Card.Text>\n            {post.message}\n            <br />\n            Posted On: {post.posted}\n          </Card.Text>\n          <Button variant=\"success\">\n            <span className=\"fa fa-thumbs-up\"></span>\n            <br />\n            {post.upVote}\n          </Button>{\" \"}\n          <Button variant=\"danger\">\n            <span className=\"fa fa-thumbs-down\"></span>\n            <br />\n            {post.dVote}\n          </Button>\n        </Card.Body>\n      </Card>\n    );\n  }\n\n  userCard(user,type) {\n    return (\n      <Card className=\"my-2 mx-auto\" style={{ width: \"18rem\" }}>\n        <Card.Body>\n          <div class=\"row\">\n            <div class=\"col-lg-12\">\n              <span class=\"one\">{user.name}</span>\n              {/* <button onClick={()=>{\n                this.sendUnfollow(user.id,type);\n              }} class=\"btn btn-danger btn-sm float-right\">{type}</button> */}\n            </div>\n          </div>\n        </Card.Body>\n      </Card>\n    );\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    addPost({\n      userId: this.state.currentUser.userId,\n      message: event.target.elements.description.value,\n    }).then((p) => {\n      showToastr(\"success\", p[\"message\"]);\n      this.updatePages(this.state.currentUser.userId);\n    });\n  }\n\n  sendRequest(event) {\n    event.preventDefault();\n    followUser({\n      uId: this.state.currentUser.userId,\n      uId2: parseInt(event.target.elements.user.value),\n    }).then((p) => {\n      showToastr(\"success\", p[\"message\"]);\n      this.updatePages(this.state.currentUser.userId);\n    });\n  }\n\n  sendUnfollow(user_id,type) {\n    let payload = {\n      uId: this.state.currentUser.userId,\n      uId2: user_id,\n    };\n    if(type === \"Unfollow\"){\n      let temp = payload.uId;\n      payload.uId = payload.uId2;\n      payload.uId2 = temp;\n    }\n    unfollowUser(payload).then((p) => {\n      showToastr(\"success\", p[\"message\"]);\n      this.updatePages(this.state.currentUser.userId);\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"#home\">\n            Welcome to MemeWorld, {this.state.currentUser.name}:\n            {this.state.currentUser.logindId} : {this.state.currentUser.userId}\n          </Navbar.Brand>\n          <Nav className=\"mr-auto\"></Nav>\n          <Button\n            onClick={() => this.updatePages(this.state.currentUser.userId)}\n            variant=\"outline-success\"\n          >\n            Refresh\n          </Button>\n        </Navbar>\n        <div className=\"row pt-2 container\">\n          <div className=\"col-sm-9\">\n            <Tabs defaultActiveKey=\"feed\">\n              <Tab eventKey=\"feed\" title=\"News Feed\">\n                <div className=\"row mt-1\">\n                  <div className=\"col-sm-12\">\n                    <Form\n                      className=\"form-inline\"\n                      onSubmit={(e) => this.handleSubmit(e)}\n                    >\n                      <Form.Group>\n                        <Form.Control\n                          type=\"text\"\n                          placeholder=\"Meme Description\"\n                          name=\"description\"\n                          required\n                        />\n                      </Form.Group>\n                      &nbsp;&nbsp;\n                      <Button variant=\"warning\" type=\"submit\">\n                        Post Meme\n                      </Button>\n                    </Form>\n                  </div>\n                </div>\n                {this.state.feed.map((item) => {\n                  return this.newPost(item);\n                })}\n              </Tab>\n              <Tab eventKey=\"posts\" title=\"My Posts\">\n                {this.state.posts.map((item) => {\n                  return this.newPost(item);\n                })}\n              </Tab>\n              <Tab eventKey=\"following\" title=\"Following\">\n                {this.state.followers.map((item) => {\n                  return this.userCard(item,'Unfollow');\n                })}\n              </Tab>\n              <Tab eventKey=\"followers\" title=\"Followers\">\n                {this.state.following.map((item) => {\n                  return this.userCard(item, 'Remove');\n                })}\n              </Tab>\n            </Tabs>\n          </div>\n          <div className=\"col-sm-3\">\n            <Form className=\"form\" onSubmit={(e) => this.sendRequest(e)}>\n              <Form.Group>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Enter user id\"\n                  name=\"user\"\n                  required\n                />\n              </Form.Group>\n              &nbsp;&nbsp;\n              <Button variant=\"secondary\" type=\"submit\">\n                Sent Follow Request\n              </Button>\n            </Form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { ToastContainer} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <ToastContainer\n              position=\"top-right\"\n              autoClose={5000}\n              hideProgressBar={false}\n              newestOnTop={false}\n              closeOnClick={true}\n              pauseOnVisibilityChange={true}\n              draggable={false}\n              pauseOnHover={true}\n            />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}